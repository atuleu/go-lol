// Code generated by go-bindata.
// sources:
// data/getGameMetaData.json
// data/getLastChunkInfo.json
// DO NOT EDIT!

package xlol

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGetgamemetadataJSON = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x4d\x8f\xda\x30\x10\x86\xff\x0a\xf2\xd9\x2b\xd9\xce\x77\x6e\xdb\x0a\xaa\xb6\x5b\xa9\x12\xad\x7a\xa8\x7a\x70\xe3\x01\x22\xb2\x0e\x75\x1c\x54\xb4\xe2\xbf\xaf\x1d\x27\x01\x0c\x28\x70\x42\xe3\xf1\xe3\x77\x3e\xf2\xbe\xa1\x35\x7f\x85\xaf\x70\x40\xb9\xfb\xfb\x59\xa0\x9c\xd1\x8c\x90\x8c\x24\x19\xc3\x68\x57\x71\xbd\xaa\xd5\xab\x8d\xa3\xf9\xcf\x5f\x14\x1d\x71\x97\xb8\x04\xb5\x07\xf5\x2c\x84\x82\xa6\x31\x67\xc8\xe4\xd6\x4a\xa3\x9c\x60\x04\xb2\x50\x87\x9d\x2e\x6b\xd9\x91\xed\x59\xb1\x69\xe5\xf6\x47\x69\x1e\x90\xda\xdc\xe4\x15\xca\x03\x62\x7e\x18\x35\x9a\x2b\x6d\x4f\x4c\xe2\x97\xb6\x9a\x25\x78\xc6\x08\x8d\x66\x94\xe5\x2c\xcb\x59\x30\xfb\xfe\x0d\xb9\x27\xe7\x52\x80\x91\xb1\xe2\x55\x03\x18\x55\xbc\xd1\x1f\x2d\xb5\x93\x1c\xb9\x80\x79\x6f\xa1\xfa\x32\x68\xa7\x44\x2c\x2d\xbf\xdd\x8d\xa9\x21\x46\x02\x2a\x7e\x70\x4f\xd2\xc8\xa9\xd8\x99\xcc\x52\xae\x9f\xf7\xbc\xac\xf8\xdf\x0a\x5c\xba\x5c\xd5\x28\xff\xfd\x86\x4a\x8b\x4b\xcd\xc5\x56\x71\x5b\x56\x27\x9e\x66\x18\x29\x28\xa0\xdc\x83\xb8\xad\x3f\x88\xf2\xa8\xd3\x7f\xc4\x3d\x23\x3b\x67\xb0\x2c\xb3\x2d\x9e\x60\xc4\x7d\x0f\x06\x06\x23\x9e\x0e\x12\x3e\xc0\xb8\xd4\xc1\xa8\xaf\x23\x99\x64\x24\xbe\x0e\xe6\x31\x92\xf4\x01\x86\xa7\x23\xf0\x6a\x61\xf1\x24\x23\xf5\x75\x84\x7e\x2d\xc1\x03\x0c\x4f\x47\xe4\x33\xa2\x49\xc6\xb0\x9b\xc7\x3f\xd7\xdb\x33\xae\xe1\xf9\x02\x4d\x97\x16\xf6\xb2\x30\x92\xf0\xff\xb4\xdc\x34\x1e\x74\x4e\x4f\x29\xba\x83\x48\x07\xc4\xf4\x90\xe2\xdb\x08\x46\x06\xc4\xf4\xde\x27\x77\x10\x6c\xfc\x10\xc8\xc3\x33\xf2\x19\xa1\x6d\xf8\xb6\x6f\xf0\xa5\xa3\xc4\xee\x5b\x16\x50\xd4\xc6\x29\xe6\xd7\x2e\xd4\x79\xcd\x27\x73\x6f\xc4\xc5\xce\x5a\x5e\x40\xae\xf5\xa6\x33\xaf\xa2\x2a\x41\x6a\x63\x6c\x20\x5e\xf8\x7a\xb4\x29\x17\xfe\xc0\x8b\xed\x02\x74\xb1\x31\xd3\x9e\x4b\x3b\xea\x93\x21\x5d\x67\x2c\x14\xfc\xb3\xb5\xda\xfb\xa5\x55\x09\x8d\x5e\x16\xb5\xb2\xbe\x93\x06\x66\x12\x2b\xe0\xba\x55\x20\xac\xa4\x13\x47\x99\x28\xdc\x71\xc4\x24\x0f\x99\xeb\x8a\x59\xb9\x8b\x4a\x9e\xe8\x18\x3b\x77\xc1\x27\x7a\x7c\x0f\x00\x00\xff\xff\x0e\xe9\xe9\x25\xe5\x05\x00\x00")

func dataGetgamemetadataJSONBytes() ([]byte, error) {
	return bindataRead(
		_dataGetgamemetadataJSON,
		"data/getGameMetaData.json",
	)
}

func dataGetgamemetadataJSON() (*asset, error) {
	bytes, err := dataGetgamemetadataJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/getGameMetaData.json", size: 1509, mode: os.FileMode(420), modTime: time.Unix(1436272905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGetlastchunkinfoJSON = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8c\x41\x0a\xc2\x30\x10\x45\xef\x32\xeb\x59\x34\x45\x1b\xd3\x9d\x14\x14\xd7\x3d\xc1\xd8\x0c\x18\x1a\x47\x89\x89\x28\xe2\xdd\x4d\x14\x03\xdd\xbe\xff\xdf\x7b\xc1\x74\x4a\x32\x1f\x2c\xf4\xad\x42\xa0\x3b\x39\x4f\x47\xcf\xa3\x93\x89\xa1\x57\x4d\xab\xd7\x08\xc2\x8f\xb8\xfd\x4f\x43\x11\xf2\x64\xb4\xea\x10\x66\x7e\xee\x02\x9d\xb9\x14\x36\xbf\xe7\x50\x8b\x0d\x02\x8b\x1d\x23\x85\x98\xae\x15\xaf\x10\x6e\x05\xed\xb3\x56\x61\xf7\xbd\x2e\x50\xb6\x6d\x0a\x14\xdd\x45\x72\xcb\x18\xa3\xdf\x9f\x00\x00\x00\xff\xff\x09\x1b\xc0\x91\xaf\x00\x00\x00")

func dataGetlastchunkinfoJSONBytes() ([]byte, error) {
	return bindataRead(
		_dataGetlastchunkinfoJSON,
		"data/getLastChunkInfo.json",
	)
}

func dataGetlastchunkinfoJSON() (*asset, error) {
	bytes, err := dataGetlastchunkinfoJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/getLastChunkInfo.json", size: 175, mode: os.FileMode(420), modTime: time.Unix(1436272933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/getGameMetaData.json":  dataGetgamemetadataJSON,
	"data/getLastChunkInfo.json": dataGetlastchunkinfoJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"getGameMetaData.json":  &bintree{dataGetgamemetadataJSON, map[string]*bintree{}},
		"getLastChunkInfo.json": &bintree{dataGetlastchunkinfoJSON, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
